[flake8]
exclude =*.pyc,.git,.tox,*migrations*,./env,__init__.py,
max-line-length = 119
# Stuff we ignore thanks to black: https://github.com/ambv/black/issues/429
ignore = E203,
         E501,
         E731,
         W503

[mypy]
# The mypy configurations: https://mypy.readthedocs.io/en/latest/config_file.html
python_version = 3.9

# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = True
# False
# Disallows all expressions in the module that have type Any.
disallow_any_expr = False
# Disallows functions that have Any in their signature after decorator transformation.
disallow_any_decorated = False
# Disallows explicit Any in type positions such as type annotations and generic type parameters.
disallow_any_explicit = False
# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = False
# Disallows subclassing a value of type Any.
disallow_subclassing_any = False
# Disallows calling functions without type annotations from functions with type annotations.
disallow_untyped_calls = False
# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = True
# False
# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = False
# Type-checks the interior of functions without type annotations.
check_untyped_defs = False
# Reports an error whenever a function with type annotations is decorated with a decorator without annotations.
disallow_untyped_decorators = False
# Changes the treatment of arguments with a default value of None by not implicitly making their type Optional.
no_implicit_optional = False
# Enables or disables strict Optional checks. If False, mypy treats None as compatible with every type.
strict_optional = False
# True
# Warns about casting an expression to its inferred type.
warn_redundant_casts = True
# Warns about unneeded # type: ignore comments.
warn_unused_ignores = False
# Shows errors for missing return statements on some execution paths.
warn_no_return = True
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = True
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = False
# Shows errors related to strict None checking, if the global strict_optional flag is enabled.
show_none_errors = True
# Ignores all non-fatal errors.
ignore_errors = False
# Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.
allow_untyped_globals = False
# Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition.
allow_redefinition = False
# By default, imported values to a module are treated as exported and mypy allows other modules to import them. When false, mypy will not re-export unless the item is imported using from-as or is included in __all__. Note that mypy treats stub files as if this is always disabled. For example:
implicit_reexport = True
# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = False
# Prefixes each error with the relevant context.
show_error_context = False
# Shows column numbers in error messages.
show_column_numbers = True
# False
# Shows error codes in error messages. See Error codes for more information.
show_error_codes = True
# False
# Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers.
pretty = True
# False
# Shows error messages with color enabled.
color_output = True
# Shows a short summary line after error messages.
error_summary = True
# Show absolute paths to files.
show_absolute_path = False
# Enables incremental mode.
incremental = True
# Shows traceback on fatal error.
show_traceback = False
# Raise exception on fatal error.
raise_exceptions = False
# Warns about missing type annotations in typeshed. This is only relevant in combination with disallow_untyped_defs or disallow_incomplete_defs.
warn_incomplete_stub = True
# Warns about per-module sections in the config file that do not match any files processed when invoking mypy. (This requires turning off incremental mode using incremental = False.)
warn_unused_configs = False
plugins =
  mypy_django_plugin.main,
  mypy_drf_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = core.settings

[mypy-*.*.migrations.*]
# Django migrations should not produce any errors:
ignore_errors = True

[mypy-*.*.tests.*]
disallow_untyped_defs = False
